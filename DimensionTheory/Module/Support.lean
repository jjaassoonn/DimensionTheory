import Mathlib.Algebra.Module.LocalizedModule
import Mathlib.AlgebraicGeometry.PrimeSpectrum.Basic
import Mathlib.Algebra.Exact

import DimensionTheory.missing_lemmas.Ideal

open PrimeSpectrum
open BigOperators

universe u v
variable (R : Type u) (M : Type v) [CommRing R] [AddCommGroup M] [Module R M]

notation module " _p " primeIdeal:40 =>
  LocalizedModule (Ideal.primeCompl primeIdeal.1) module

/--
Support of an `R`-module
-/
def Module.Supp : Set (PrimeSpectrum R) :=
{ ùî≠ : PrimeSpectrum R | Nontrivial <| M _p ùî≠ }

notation "Supp(" R "," M ")" => Module.Supp R M

namespace Module.Supp

variable {R}

lemma mem_iff {ùî≠ : PrimeSpectrum R} : ùî≠ ‚àà Supp(R, M) ‚Üî Nontrivial (M _p ùî≠) := Iff.rfl

lemma mem_iff_of_finite [fin : Module.Finite R M] {ùî≠ : PrimeSpectrum R} :
    ùî≠ ‚àà Supp(R, M) ‚Üî ùî≠ ‚àà zeroLocus (Module.annihilator R M) := by
  classical
  constructor
  ¬∑ rintro (‚ü®x, y, hxy‚ü© : Nontrivial _) r hr‚ÇÄ
    by_contra! hr‚ÇÅ
    suffices Subsingleton (M _p ùî≠) from hxy (Subsingleton.elim _ _)
    have eq : ‚àÄ (x : M _p ùî≠), x = 0 := by
      intro x
      induction x using LocalizedModule.induction_on with
      | h a b =>
        show _ = LocalizedModule.mk 0 1
        rw [LocalizedModule.mk_eq]
        refine ‚ü®‚ü®r, hr‚ÇÅ‚ü©, ?_‚ü©
        simp only [SetLike.mem_coe, Module.mem_annihilator] at hr‚ÇÄ
        simpa only [one_smul, smul_zero] using hr‚ÇÄ a
    exact ‚ü®fun a b ‚Ü¶ eq a |>.trans <| eq b |>.symm‚ü©
  ¬∑ intro H
    by_contra! h
    replace h := subsingleton_or_nontrivial (M _p ùî≠) |>.resolve_right h
    obtain ‚ü®S, hS‚ü© := fin.1
    if hS' : S = ‚ä•
    then
      subst hS'
      simp only [Finset.bot_eq_empty, Finset.coe_empty, Submodule.span_empty] at hS
      have eq0 : annihilator R M = ‚ä§ := by
        ext x
        simp only [mem_annihilator, Submodule.mem_top, iff_true]
        intro m
        have mem : x ‚Ä¢ m ‚àà (‚ä§ : Submodule R M) := ‚ü®‚ü©
        rwa [‚Üê hS] at mem
      simp [eq0] at H
    else
      have (œâ : S) : LocalizedModule.mk œâ.1 1 = .mk 0 1 := h.elim _ _
      simp_rw [LocalizedModule.mk_eq, one_smul, smul_zero] at this
      choose x hx using this
      have mem : (‚àè (œâ : S), x œâ : R) ‚àà annihilator R M := by
        rw [mem_annihilator]
        intro m
        have mem_m : m ‚àà (‚ä§ : Submodule R M) := ‚ü®‚ü©
        rw [‚Üê hS, mem_span_finset] at mem_m
        obtain ‚ü®f, rfl‚ü© := mem_m
        rw [Finset.smul_sum]
        apply Finset.sum_eq_zero
        intro z hz

        let e : Option (S.erase z) ‚âÉ S :=
          Finset.subtypeInsertEquivOption (t := S.erase z) (x := z) (h := by simp) |>.symm.trans
          ‚ü®fun x ‚Ü¶ ‚ü®x.1, by simpa [Finset.insert_erase hz] using x.2‚ü©,
            fun x ‚Ü¶ ‚ü®x.1, by simp [Finset.insert_erase hz, x.2]‚ü©,
            by intro; ext; rfl, by intro; ext; rfl‚ü©
        rw [calc (‚àè (œâ : S), x œâ : R)
          _ = ‚àè œâ : Option (S.erase z), (x ‚ü®_, (e œâ).2‚ü© : R) :=
              Fintype.prod_bijective e e.bijective _ _ (fun _ ‚Ü¶ rfl) |>.symm,
          Fintype.prod_option]
        simp only [Finset.subtypeInsertEquivOption, ne_eq, Option.elim, Equiv.trans_apply,
          Equiv.coe_fn_symm_mk, Equiv.coe_fn_mk, Finset.univ_eq_attach, e]
        rw [mul_comm, mul_smul, ‚Üê mul_smul _ (f z), mul_comm, mul_smul]
        erw [hx ‚ü®_, hz‚ü©]
        rw [smul_zero, smul_zero]
      specialize H mem
      erw [SetLike.mem_coe] at H
      rw [ùî≠.2.prod_mem_iff_exists_mem'] at H
      simp only [Finset.univ_eq_attach, Finset.mem_attach, true_and, Subtype.exists] at H
      obtain ‚ü®_, _, h‚ü© := H
      exact (x _).2 h

lemma eq_union_of_exact
    {M' M M'' : Type*}
    [AddCommGroup M'] [AddCommGroup M] [AddCommGroup M'']
    [Module R M'] [Module R M] [Module R M'']
    [Module.Finite R M'] [Module.Finite R M] [Module.Finite R M'']
    (f : M' ‚Üí‚Çó[R] M) (g : M ‚Üí‚Çó[R] M'')
    (inj : Function.Injective f)
    (ex : Function.Exact f g)
    (surj : Function.Surjective g) :
    Supp(R, M) = Supp(R, M') ‚à™ Supp(R, M'') := by
  sorry

end Module.Supp
